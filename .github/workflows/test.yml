name: Run Tests on PR Creation

on:
  push:
    branches:
      - "**" # Matches all branches
      # - "!main" # Exclude main branch

permissions:
  contents: write
  pages: write    # Needed for actions/deploy-pages
  id-token: write # Needed for actions/deploy-pages
jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # - name: Install dependencies
      #   run: |
      #     pip install -r requirements.txt

      # - name: Run tests and collect coverage
      #   run: |
      #     make test | tee coverage.txt

      # - name: Extract coverage percent
      #   id: get_coverage
      #   run: |
      #     percent=$(grep -E "TOTAL" coverage.txt | awk '{print $NF}' | sed 's/%//')
      #     mkdir badges
      #     echo "Coverage=$percent%" && echo "coverage=$percent" >> $GITHUB_OUTPUT

      # - name: Extract coverage Summary
      #   id: extract_coverages
      #   run: |
      #     percentages_raw=$(grep -E "TOTAL" coverage.txt | awk '{print $NF}' | sed 's/%//')
      #     percentages=()
      #     while IFS= read -r line; do
      #       percentages+=("$line")
      #     done <<< "$percentages_raw"
      #     echo "v0_pre_percent=${percentages[0]:-N/A}" >> $GITHUB_OUTPUT
      #     echo "v0_post_percent=${percentages[1]:-N/A}" >> $GITHUB_OUTPUT

      # - name: Add Coverage to Summary
      #   run: |
      #     echo "### Code Coverage: **${{ steps.get_coverage.outputs.coverage }}**%" >> $GITHUB_STEP_SUMMARY

      - name: Extract coverage percentage
        id: get_coverage
        run: |
          percentages_raw=$(grep -E "TOTAL" coverage.txt | awk '{print $NF}' | sed 's/%//')
          modules_raw=$(grep -E "Running unit tests for" coverage.txt | awk '{print $NF}'| sed 's/\.\.\.//')
          percentages=(); while IFS= read -r line; do percentages+=("$line"); done <<< "$percentages_raw"
          modules=(); while IFS= read -r line; do modules+=("$line"); done <<< "$modules_raw"
          if [ ${#percentages[@]} -ne ${#modules[@]} ]; then
            echo "Error: Number of coverage percentages does not match number of modules."
            exit 1
          fi
          declare -A coverage_map
          for i in "${!modules[@]}"; do
            module="${modules[$i]}"
            percentage="${percentages[$i]}"
            coverage_map["$module"]="$percentage"
          done

          echo "Coverage map: ${coverage_map[@]}"
          echo "async_post=${coverage_map["async-post"]:-N/A}" >> $GITHUB_OUTPUT
          echo "async_sns_success=${coverage_map["async-sns-success"]:-N/A}" >> $GITHUB_OUTPUT
          echo "async_sns_failure=${coverage_map["async-sns-failure"]:-N/A}" >> $GITHUB_OUTPUT
          echo "task_get=${coverage_map["task-get"]:-N/A}" >> $GITHUB_OUTPUT

      - name: Add Coverage to Summary
        run: |
          echo "### Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Module | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| Async-Post | **${{ steps.get_coverage.outputs.async_post }}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| Async SNS Success | **${{ steps.get_coverage.outputs.async_sns_success }}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| Async SNS Failure | **${{ steps.get_coverage.outputs.async_sns_failure }}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| Task Get | **${{ steps.get_coverage.outputs.task_get }}%** |" >> $GITHUB_STEP_SUMMARY

      # - name: Upload coverage report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: coverage.txt


      # - name: Generate badge
      #   if: github.ref == 'refs/heads/main'
      #   run: |
      #     npm i -g badgen-cli
      #     export COV=${{ steps.get_coverage.outputs.coverage }}
      #     COLOR=$(node -p '+process.env.COV >= 90 ? `green` : `orange`')
      #     mkdir -p badges
      #     badgen -j coverage -s $COV% -c $COLOR > badges/coverage.svg
      #     rm -f coverage.txt

      # - name: Push to coverage-badges11 branch
      #   if: github.ref == 'refs/heads/main'
      #   uses: stefanzweifel/git-auto-commit-action@v4
      #   with:
      #     commit_message: "Update coverage badge"
      #     branch: coverage-badges11
      #     skip_fetch: true
      #     skip_checkout: true

