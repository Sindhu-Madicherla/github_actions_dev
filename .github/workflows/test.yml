name: Run Tests on PR Creation

on:
  push:
    branches:
      - "**" # Matches all branches

permissions:
  contents: read
  pull-requests: write
jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests and collect coverage
        run: |
          make test | tee coverage.txt

      - name: Extract coverage percent
        id: get_coverage
        run: |
          percent=$(grep -E "TOTAL" coverage.txt | awk '{print $NF}' | sed 's/%//')
          mkdir badges
          echo "Coverage=$percent%" && echo "coverage=$percent" >> $GITHUB_OUTPUT

      - name: Add Coverage to Summary
        run: |
          echo "### Code Coverage: **${{ steps.get_coverage.outputs.coverage }}**%" >> $GITHUB_STEP_SUMMARY

      - name: Generate and Commit badge
        if: github.ref == 'refs/heads/trigger_test_PR'
        run: |
          npm i -g badgen-cli
          export COV=${{ steps.get_coverage.outputs.coverage }}
          COLOR=$(node -p '+process.env.COV >= 90 ? `green` : `orange`')
          mkdir -p badges
          badgen -j coverage -s $COV% -c $COLOR > badges/coverage.svg
          rm -f coverage.txt

      - name: Upload Pages artifact
        if: github.ref == 'refs/heads/trigger_test_PR'
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'badges'

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/trigger_test_PR'
        id: deployment
        uses: actions/deploy-pages@v4

      # - name: Generate and Commit badge
      #   uses: emibcn/badge-action@v2.0.3
      #   with:
      #     label: 'Test coverage'
      #     status: ${{ steps.get_coverage.outputs.coverage }}
      #     path: badges/badge.svg
      #     color: ${{ steps.get_coverage.outputs.coverage > 75 && 'green' || 'red' }}


      # - name: Add PR Comment with Coverage Status
      #   uses: actions/github-script@v7
      #   if: always()
      #   with:
      #     script: |
      #       const codeCoverage = parseFloat(process.env.CODE_COVERAGE) || 0;
      #       let commentBody = `### Code Coverage Percentage :  **${codeCoverage}**%\n\n `;
      #       console.log(`Raw process.env.CODE_COVERAGE: "${process.env.CODE_COVERAGE}"`);
      #       console.log(`Parsed codeCoverage: ${codeCoverage}`);

      #       if (codeCoverage >= 75) {
      #         commentBody += 'Code coverage is above 75%. Good job! 👍\n';
      #       } else {
      #         commentBody += 'Code coverage is below 75%. Please improve it! 👎\n';
      #       }

      #       // Logic to find and update/create comment
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
        #       issue_number: context.issue.number,
        #     });

        #     const existingComment = comments.find(comment =>
        #       comment.user.login === 'github-actions[bot]' &&
        #       comment.body.includes('### Code Coverage Percentage :')
        #     );

        #     if (existingComment) {
        #       await github.rest.issues.updateComment({
        #         owner: context.repo.owner,
        #         repo: context.repo.repo,
        #         comment_id: existingComment.id,
        #         body: commentBody,
        #       });
        #     } else {
        #       await github.rest.issues.createComment({
        #         issue_number: context.issue.number,
        #         owner: context.repo.owner,
        #         repo: context.repo.repo,
        #         body: commentBody,
        #       });
        #     }
        # env:
        #   CODE_COVERAGE: ${{ steps.get_coverage.outputs.coverage }}

