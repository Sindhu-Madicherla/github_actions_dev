name: Run Tests on PR Creation

on:
  push:
    branches:
      - "**" # Matches all branches

permissions:
  contents: write
  pages: write    # Needed for actions/deploy-pages
  id-token: write # Needed for actions/deploy-pages
jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests and collect coverage
        run: |
          make test | tee coverage.txt

      - name: Extract coverage percent
        id: get_coverage
        run: |
          percent=$(grep -E "TOTAL" coverage.txt | awk '{print $NF}' | sed 's/%//')
          mkdir badges
          echo "Coverage=$percent%" && echo "coverage=$percent" >> $GITHUB_OUTPUT

      - name: Add Coverage to Summary
        run: |
          echo "### Code Coverage: **${{ steps.get_coverage.outputs.coverage }}**%" >> $GITHUB_STEP_SUMMARY

      - name: Generate badge
        if: github.ref == 'refs/heads/main'
        run: |
          npm i -g badgen-cli
          export COV=${{ steps.get_coverage.outputs.coverage }}
          COLOR=$(node -p '+process.env.COV >= 90 ? `green` : `orange`')
          mkdir -p badges
          badgen -j coverage -s $COV% -c $COLOR > badges/coverage.svg
          rm -f coverage.txt

      # - name: Upload Pages artifact
      #   if: github.ref == 'refs/heads/trigger_test_PR'
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: 'badges'

      # - name: Deploy to GitHub Pages
      #   if: github.ref == 'refs/heads/trigger_test_PR'
      #   id: deployment
      #   uses: actions/deploy-pages@v4

      - name: Create coverage-badges6 branch if not exists
        run: |
          git config --global user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          git fetch origin
          if ! git show-ref --quiet refs/remotes/origin/coverage-badges6; then
            echo "Creating orphan coverage-badges6 branch"
            git checkout --orphan coverage-badges6
            find . -mindepth 1 -maxdepth 1 ! -name badges ! -name .git -exec rm -rf {} + && git clean -fdx
            echo "Branch to keep badges" > README.md
            git add .
            git commit -m "Initial commit"
            git push origin coverage-badges6
          else
            echo "Branch exists, checking it out"
            git checkout coverage-badges6
          fi

      - name: Push to coverage-badges6 branch
        if: github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update coverage badge"
          branch: coverage-badges6
          skip_fetch: true
          skip_checkout: true

