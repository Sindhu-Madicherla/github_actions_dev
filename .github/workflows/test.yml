name: Run Tests on PR Creation

on:
  push:
    branches:
      - trigger_test_PR

permissions:
  contents: read
  pull-requests: write
run-name: '${{ github.event.head_commit.message }} | Coverage: ${{ steps.get_coverage.outputs.coverage }}'
jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests and collect coverage
        run: |
          make test | tee coverage.txt

      - name: Extract coverage percent
        id: get_coverage
        run: |
          percent=$(grep -E "TOTAL" coverage.txt | awk '{print $NF}' | sed 's/%//')
          mkdir badges
          echo "Coverage=$percent%" && echo "coverage=$percent" >> $GITHUB_OUTPUT

      # - name: Generate and Commit badge
      #   uses: emibcn/badge-action@v2.0.3
      #   with:
      #     label: 'Test coverage'
      #     status: ${{ steps.get_coverage.outputs.coverage }}
      #     path: badges/badge.svg
      #     color: ${{ steps.get_coverage.outputs.coverage > 75 && 'green' || 'red' }}


      # - name: Add PR Comment with Coverage Status
      #   uses: actions/github-script@v7
      #   if: always()
      #   with:
      #     script: |
      #       const codeCoverage = parseFloat(process.env.CODE_COVERAGE) || 0;
      #       let commentBody = `### Code Coverage Percentage :  **${codeCoverage}**%\n\n `;
      #       console.log(`Raw process.env.CODE_COVERAGE: "${process.env.CODE_COVERAGE}"`);
      #       console.log(`Parsed codeCoverage: ${codeCoverage}`);

      #       if (codeCoverage >= 75) {
      #         commentBody += 'Code coverage is above 75%. Good job! 👍\n';
      #       } else {
      #         commentBody += 'Code coverage is below 75%. Please improve it! 👎\n';
      #       }

      #       // Logic to find and update/create comment
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
        #       issue_number: context.issue.number,
        #     });

        #     const existingComment = comments.find(comment =>
        #       comment.user.login === 'github-actions[bot]' &&
        #       comment.body.includes('### Code Coverage Percentage :')
        #     );

        #     if (existingComment) {
        #       await github.rest.issues.updateComment({
        #         owner: context.repo.owner,
        #         repo: context.repo.repo,
        #         comment_id: existingComment.id,
        #         body: commentBody,
        #       });
        #     } else {
        #       await github.rest.issues.createComment({
        #         issue_number: context.issue.number,
        #         owner: context.repo.owner,
        #         repo: context.repo.repo,
        #         body: commentBody,
        #       });
        #     }
        # env:
        #   CODE_COVERAGE: ${{ steps.get_coverage.outputs.coverage }}



# .github/workflows/test.yml
name: CI Checks & Coverage

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

# Modified run-name to access job output
run-name: '${{ github.event.head_commit.message }} | Coverage: ${{ jobs.test_and_report.outputs.coverage_percentage || "N/A" }}'

jobs:
  test_and_report:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      pages: write
      id-token: write

    # NEW: Define outputs for this job
    outputs:
      coverage_percentage: ${{ steps.get_coverage.outputs.coverage }} # Capture step output as job output

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # ... (Your setup steps like Node.js, Install Dependencies) ...

      - name: Extract coverage percent
        id: get_coverage
        run: |
          # Ensure coverage.txt exists and has the expected format
          # For demonstration, creating a dummy coverage.txt
          echo "TOTAL   90%" > coverage.txt # <<< REMOVE THIS LINE IN REAL CODE

          percent=$(grep -E "TOTAL" coverage.txt | awk '{print $NF}' | sed 's/%//')

          # Ensure output name matches what's used in job outputs (coverage)
          echo "coverage=${percent}" >> $GITHUB_OUTPUT
          echo "Coverage value extracted: ${percent}%" # For debug in logs

      # ... (Rest of your steps: PR Comment, Generate Badge, Deploy, Update README) ...

      # Example: Optional PR Comment step (using the same coverage output)
      - name: Add PR Comment with Code Coverage
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const coverage = parseFloat(process.env.JOB_COVERAGE_PERCENTAGE);
            let commentBody = `### Code Coverage Percentage :  **${coverage}%**\n\n`;

            if (coverage >= 75) {
              commentBody += 'Code coverage is above 75%. Good job! 👍\n';
            } else {
              commentBody += 'Code coverage is below 75%. Please improve it! 👎\n';
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('### Code Coverage Percentage :')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            }
        env:
          JOB_COVERAGE_PERCENTAGE: ${{ jobs.test_and_report.outputs.coverage_percentage }} # Pass job output to script env
