name: Run tests and generate Coverage Badge

on:
  push:
    branches: ['workflow-testing']
  pull_request:

permissions:
  contents: write

jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for actions/checkout if you fetch the repo
      pages: write    # Needed for actions/deploy-pages
      id-token: write # Needed for actions/deploy-pages

    environment:
      name: github-pages

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests and collect coverage
        run: |
          make test | tee coverage.txt
          echo "Workflow for this branch has run"
          # Assuming the coverage report is generated in coverage.txt

      - name: Extract coverage percent
        id: get_coverage
        run: |
          percent=$(grep -E "TOTAL" coverage.txt | awk '{print $NF}' | sed 's/%//')
          echo "Coverage=$percent%" && echo "coverage=$percent" >> $GITHUB_OUTPUT

      - name: Generate and Commit badge
        run: |
          mkdir tmp
          python scripts/generate_badge.py ${{ steps.get_coverage.outputs.coverage }} tmp/coverage.svg

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'tmp'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          url: ${{ steps.deployment.outputs.page_url }}

      # - name: Commit badge
      #   run: |
      #     git config user.name "github-actions"
      #     git config user.email "github-actions@github.com"
      #     git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
      #     git fetch origin gh-pages && git checkout gh-pages || git switch --orphan gh-pages
      #     cp tmp/coverage.svg .
      #     if git diff --quiet coverage.svg; then
      #       echo "No changes to commit"
      #     else
      #       echo "Changes detected, committing..."
      #       find . -maxdepth 1 -mindepth 1 ! -name ".git" ! -name "coverage.svg" -exec rm -rf {} +
      #       git add coverage.svg
      #       git commit -m "Update badge"
      #       git push -f origin gh-pages
      #     fi
