name: Run Tests on PR Creation

on: [pull_request, workflow_dispatch]

permissions:
  contents: write

jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write #  Needed for actions/checkout if you fetch the repo
      pages: write    # Needed for actions/deploy-pages
      id-token: write # Needed for actions/deploy-pages

    env:
      PR_HEAD_REF: ${{ github.event.pull_request.head.ref }}  # Define PR head branch as a variable

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests and collect coverage
        run: |
          make test | tee coverage.txt

      - name: Extract coverage percent
        id: get_coverage
        run: |
          percent=$(grep -E "TOTAL" coverage.txt | awk '{print $NF}' | sed 's/%//')
          echo "Coverage=$percent%" && echo "coverage=$percent" >> $GITHUB_OUTPUT

      - name: Generate and Commit badge
        uses: emibcn/badge-action@v1
        with:
          label: 'Test coverage'
          status: ${{ steps.get_coverage.outputs.coverage }}
          path: coverage_output/badge.svg
          color: ${{ steps.get_coverage.outputs.coverage > 75 && 'green' || 'red' }}

      - name: Extract coverage percent
        run: |
          cat coverage_output/badge.svg

      # - name: Commit badge
      #   run: |
      #     git config user.name "github-actions"
      #     git config user.email "github-actions@github.com"
      #     git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      #     cp tmp/coverage.svg coverage.svg # Copy badge to the repository root

      #     # Check if the badge file has changed to avoid unnecessary commits
      #     if git diff --quiet coverage.svg; then
      #       echo "coverage.svg badge has not changed. No commit needed."
      #     else
      #       git pull origin ${{ env.PR_HEAD_REF }} --rebase || {
      #         echo "Failed to rebase/pull. This likely means concurrent pushes or complex history."
      #         echo "Attempting a plain force push as a fallback. Review history if this occurs often."
      #         git add coverage.svg # Ensure badge is staged again after potential rebase
      #         git commit -m "docs: Update coverage badge [skip ci]" || true # Commit only if changes exist, ignore error if no changes
      #         git push origin HEAD:${{ env.PR_HEAD_REF }} --force
      #         exit 0
      #       }

      #       git add coverage.svg
      #       git commit -m "docs: Update coverage badge [skip ci]" || true # || true to prevent error if no changes left after pull/rebase

      #       git push origin HEAD:${{ env.PR_HEAD_REF }} --force-with-lease
      #       echo "Coverage badge updated in PR branch."
      #     fi
